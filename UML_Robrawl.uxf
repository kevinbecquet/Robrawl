<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.3">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=10
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>416</x>
      <y>488</y>
      <w>360</w>
      <h>224</h>
    </coordinates>
    <panel_attributes>Robot
--
- int cooldown
--
+ Robot()
+ Robot(Pos : vector2f, nom: string, orientation: float, v: int) 
+ Robot(r : const Robot&amp;)
+ operator=(r : const Robot&amp;) : Robot&amp;

+ deplace() : void
+ reoriente(direction : int) : void
+ attaque(missile : Missile*, render : SFMLManager&amp;) : void

+ displayInWindow( r : SFMLManager&amp;) : void 




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>320</x>
      <y>0</y>
      <w>312</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>Terrain
--
- vector&lt;MovingElt*&gt; : elem
- vector&lt;Obstacle&gt; : obs
--
+ getElem() : vector&lt;MovingElt*&gt;
+ getObs() : vector&lt;Obstacle&gt;

+ addMissile(): countMissile : int
+ supprElem(): void

+ ajout(e : MovingElt*) : void
+ ajout(o : Obstacle) : void

+ loadRobot() : void
+ loadObstacle(): void

+ action(): void
+ victoryCheck():bool

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>136</y>
      <w>304</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Obstacle
--
- img : sf::sprite
- position : sf::Vector2f

--
+ Obstacle(t : Texture*, pos : Vector2f)
+ getSprite() : Sprite
+ getPosition() : sf::Vector2f
+ displayInwindow(render : SFMLManager&amp;) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>472</x>
      <y>152</y>
      <w>40</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0...n
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>712</x>
      <y>264</y>
      <w>320</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>SFMLManager
--
# window : sf::RenderWindow*

--
+ SFMLManager()
+~ SFMLManager()
+ getWindow() : RenderWindow*&amp;
+ eventManager() : void
+ displayRobot(rob : Robot&amp;) : void
+ displayObstacle(obs : Obstacle&amp;) :void
+ displayMissile(mis : Missile&amp;) : void
+ displatWindow(map : Terrain&amp;) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>328</x>
      <y>200</y>
      <w>352</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>/MovingElt/
--
# position : sf::Vector2f;
# im : sf::Sprite;
# vie: int
# nom : string;
# orientation : float; 
# vitesse : int
--
+ MovingElt()
+ MovingElt( p : sf::Vector2f, t : Texture*)
+ virtual ~MovingElt()

+ getPosition() : Vector2f
+ getVie() : int
+ getOrientation() : float
+ getNom() : string

+ getIm() : Sprite
+ setImPos() : void

/+ displayInWindow(render : SFMLManager&amp;) : void /
/+ deplace() : void/
/+ reoriente(direction : int) : void/
/+ attaque(missile : Missile*, render : SFMLManager&amp;) : void/

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>520</x>
      <y>432</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>72</x>
      <y>472</y>
      <w>336</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>Missile
--
- dmg : int
- launcher : string
--
+ Missile(Pos : vector2f, nom: string, orientation: float, dmg: int, launcher: string)

+ displayInWindow(r : SFMLManager&amp;) : void 
+ deplace() : void
 
+ isColliding(Obstacle&amp; obs): bool
+ isColliding(MovingElt&amp; elt): bool



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>144</x>
      <y>320</y>
      <w>200</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>230.0;10.0;10.0;10.0;10.0;190.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>120</x>
      <y>80</y>
      <w>216</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0...n
m2=1</panel_attributes>
    <additional_attributes>250.0;10.0;10.0;10.0;10.0;70.0</additional_attributes>
  </element>
</diagram>
